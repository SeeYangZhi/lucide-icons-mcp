name: Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches: [main]

env:
  NODE_VERSION: "22"

jobs:
  # Step 1: Check if this is an automated Lucide update PR
  check-release-conditions:
    name: Check release conditions
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      lucide_version: ${{ steps.extract.outputs.lucide_version }}
      pr_number: ${{ github.event.pull_request.number }}

    steps:
      - name: Check release conditions
        id: check
        run: |
          echo "🔍 Checking release conditions..."

          # Check if PR was merged
          if [ "${{ github.event.pull_request.merged }}" != "true" ]; then
            echo "❌ PR was not merged, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if this is a Lucide update PR
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" == *"Update Lucide icons to"* ]]; then
            echo "✅ This is a Lucide update PR"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ Not a Lucide update PR, skipping automated release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract Lucide version
        id: extract
        if: steps.check.outputs.should_release == 'true'
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Extract version from "🔄 Update Lucide icons to v1.2.3" or "Update Lucide icons to v1.2.3"
          LUCIDE_VERSION=$(echo "$PR_TITLE" | sed -n 's/.*Update Lucide icons to \(.*\)/\1/p' | tr -d '[:space:]')
          echo "📋 Extracted Lucide version: $LUCIDE_VERSION"
          echo "lucide_version=$LUCIDE_VERSION" >> $GITHUB_OUTPUT

  # Step 2: Create release
  create-release:
    name: Create release and publish
    runs-on: ubuntu-latest
    needs: check-release-conditions
    if: needs.check-release-conditions.outputs.should_release == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          bun install

      - name: Build project
        run: |
          echo "🏗️ Building project..."
          bun run build

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          bun test

      - name: Calculate new version
        id: version
        run: |
          echo "📋 Calculating new version..."

          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump patch version
          NEW_VERSION=$(node -p "
            const semver = '$CURRENT_VERSION'.split('.');
            semver[2] = String(parseInt(semver[2]) + 1);
            semver.join('.');
          ")

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json
        run: |
          echo "📝 Updating package.json version..."
          node -e "
            const pkg = require('./package.json');
            pkg.version = '${{ steps.version.outputs.new_version }}';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Commit version bump
        run: |
          echo "💾 Committing version bump..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: 🚀 Release v${{ steps.version.outputs.new_version }}
          body: |
            ## 🚀 Release v${{ steps.version.outputs.new_version }}

            ### 🔄 Updated Lucide Icons
            - **Lucide version:** `${{ needs.check-release-conditions.outputs.lucide_version }}`

            ### 📦 Installation
            ```bash
            # Install globally
            npm install -g lucide-icons-mcp@${{ steps.version.outputs.new_version }}

            # Or install locally
            npm install lucide-icons-mcp@${{ steps.version.outputs.new_version }}
            ```

            ### 🔄 Changes
            - Updated Lucide icons to ${{ needs.check-release-conditions.outputs.lucide_version }}
            - Refreshed icon metadata and categories
            - Updated build artifacts and dependencies

            ### 🤖 Automation
            This release was automatically created following the merge of PR #${{ needs.check-release-conditions.outputs.pr_number }}.

            **Source PR:** [${{ github.event.pull_request.title }}](${{ github.event.pull_request.html_url }})

            ---

            🏷️ **Tags:** lucide-icons, mcp-server, automated-release
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Publish to npm
        id: npm_publish
        if: env.NODE_AUTH_TOKEN != ''
        run: |
          echo "📤 Publishing to npm..."
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
